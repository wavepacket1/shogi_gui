/* tslint:disable */
/* eslint-disable */
/**
 * Shogi API V1
 * 将棋アプリケーションのAPI仕様
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiV1BoardsIdGet200Response
 */
export interface ApiV1BoardsIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1BoardsIdGet200Response
     */
    'sfen': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1BoardsIdGet200Response
     */
    'legal_flag': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1BoardsIdGet404Response
 */
export interface ApiV1BoardsIdGet404Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1BoardsIdGet404Response
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1BoardsIdGet404Response
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ApiV1GamesGameIdBoardsBoardIdMovePatch200Response
 */
export interface ApiV1GamesGameIdBoardsBoardIdMovePatch200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1GamesGameIdBoardsBoardIdMovePatch200Response
     */
    'status'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1GamesGameIdBoardsBoardIdMovePatch200Response
     */
    'legal_flag'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ApiV1GamesGameIdBoardsBoardIdMovePatch200Response
     */
    'board_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GamesGameIdBoardsBoardIdMovePatch200Response
     */
    'sfen'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1GamesGameIdBoardsBoardIdMovePatch422Response
 */
export interface ApiV1GamesGameIdBoardsBoardIdMovePatch422Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1GamesGameIdBoardsBoardIdMovePatch422Response
     */
    'status'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1GamesGameIdBoardsBoardIdMovePatch422Response
     */
    'legal_flag'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ApiV1GamesGameIdBoardsBoardIdMovePatch422Response
     */
    'board_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GamesGameIdBoardsBoardIdMovePatch422Response
     */
    'sfen'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GamesGameIdBoardsBoardIdMovePatch422Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1GamesGameIdBoardsBoardIdMovePatchRequest
 */
export interface ApiV1GamesGameIdBoardsBoardIdMovePatchRequest {
    /**
     * 指し手の表記
     * @type {string}
     * @memberof ApiV1GamesGameIdBoardsBoardIdMovePatchRequest
     */
    'move': string;
}
/**
 * 
 * @export
 * @interface ApiV1GamesPost201Response
 */
export interface ApiV1GamesPost201Response {
    /**
     * 
     * @type {number}
     * @memberof ApiV1GamesPost201Response
     */
    'game_id': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GamesPost201Response
     */
    'status': ApiV1GamesPost201ResponseStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ApiV1GamesPost201Response
     */
    'board_id': number;
}

export const ApiV1GamesPost201ResponseStatusEnum = {
    Active: 'active',
    Completed: 'completed'
} as const;

export type ApiV1GamesPost201ResponseStatusEnum = typeof ApiV1GamesPost201ResponseStatusEnum[keyof typeof ApiV1GamesPost201ResponseStatusEnum];

/**
 * 
 * @export
 * @interface ApiV1GamesPost422Response
 */
export interface ApiV1GamesPost422Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1GamesPost422Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1GamesPostRequest
 */
export interface ApiV1GamesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1GamesPostRequest
     */
    'status': ApiV1GamesPostRequestStatusEnum;
}

export const ApiV1GamesPostRequestStatusEnum = {
    Active: 'active',
    Completed: 'completed'
} as const;

export type ApiV1GamesPostRequestStatusEnum = typeof ApiV1GamesPostRequestStatusEnum[keyof typeof ApiV1GamesPostRequestStatusEnum];

/**
 * 
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'game_id': number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'status': GameStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'board_id': number;
}

export const GameStatusEnum = {
    Active: 'active',
    Completed: 'completed'
} as const;

export type GameStatusEnum = typeof GameStatusEnum[keyof typeof GameStatusEnum];

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'error'?: string;
}

/**
 * BoardsApi - axios parameter creator
 * @export
 */
export const BoardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary デフォルトボードの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BoardsDefaultGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/boards/default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ボードの取得
         * @param {number} id ボードID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BoardsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1BoardsIdGet', 'id', id)
            const localVarPath = `/api/v1/boards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardsApi - functional programming interface
 * @export
 */
export const BoardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary デフォルトボードの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BoardsDefaultGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1BoardsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BoardsDefaultGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardsApi.apiV1BoardsDefaultGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ボードの取得
         * @param {number} id ボードID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BoardsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1BoardsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BoardsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BoardsApi.apiV1BoardsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BoardsApi - factory interface
 * @export
 */
export const BoardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardsApiFp(configuration)
    return {
        /**
         * 
         * @summary デフォルトボードの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BoardsDefaultGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1BoardsIdGet200Response> {
            return localVarFp.apiV1BoardsDefaultGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ボードの取得
         * @param {number} id ボードID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BoardsIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1BoardsIdGet200Response> {
            return localVarFp.apiV1BoardsIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardsApi - object-oriented interface
 * @export
 * @class BoardsApi
 * @extends {BaseAPI}
 */
export class BoardsApi extends BaseAPI {
    /**
     * 
     * @summary デフォルトボードの取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiV1BoardsDefaultGet(options?: RawAxiosRequestConfig) {
        return BoardsApiFp(this.configuration).apiV1BoardsDefaultGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ボードの取得
     * @param {number} id ボードID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiV1BoardsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return BoardsApiFp(this.configuration).apiV1BoardsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GamesApi - axios parameter creator
 * @export
 */
export const GamesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ゲームを作成する
         * @param {ApiV1GamesPostRequest} [apiV1GamesPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GamesPost: async (apiV1GamesPostRequest?: ApiV1GamesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1GamesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GamesApi - functional programming interface
 * @export
 */
export const GamesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GamesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ゲームを作成する
         * @param {ApiV1GamesPostRequest} [apiV1GamesPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GamesPost(apiV1GamesPostRequest?: ApiV1GamesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1GamesPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GamesPost(apiV1GamesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.apiV1GamesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GamesApi - factory interface
 * @export
 */
export const GamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GamesApiFp(configuration)
    return {
        /**
         * 
         * @summary ゲームを作成する
         * @param {ApiV1GamesPostRequest} [apiV1GamesPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GamesPost(apiV1GamesPostRequest?: ApiV1GamesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1GamesPost201Response> {
            return localVarFp.apiV1GamesPost(apiV1GamesPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GamesApi - object-oriented interface
 * @export
 * @class GamesApi
 * @extends {BaseAPI}
 */
export class GamesApi extends BaseAPI {
    /**
     * 
     * @summary ゲームを作成する
     * @param {ApiV1GamesPostRequest} [apiV1GamesPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public apiV1GamesPost(apiV1GamesPostRequest?: ApiV1GamesPostRequest, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).apiV1GamesPost(apiV1GamesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MovesApi - axios parameter creator
 * @export
 */
export const MovesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 駒の移動API
         * @param {number} gameId Game ID
         * @param {number} boardId Board ID
         * @param {ApiV1GamesGameIdBoardsBoardIdMovePatchRequest} [apiV1GamesGameIdBoardsBoardIdMovePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GamesGameIdBoardsBoardIdMovePatch: async (gameId: number, boardId: number, apiV1GamesGameIdBoardsBoardIdMovePatchRequest?: ApiV1GamesGameIdBoardsBoardIdMovePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('apiV1GamesGameIdBoardsBoardIdMovePatch', 'gameId', gameId)
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('apiV1GamesGameIdBoardsBoardIdMovePatch', 'boardId', boardId)
            const localVarPath = `/api/v1/games/{game_id}/boards/{board_id}/move`
                .replace(`{${"game_id"}}`, encodeURIComponent(String(gameId)))
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1GamesGameIdBoardsBoardIdMovePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MovesApi - functional programming interface
 * @export
 */
export const MovesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MovesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 駒の移動API
         * @param {number} gameId Game ID
         * @param {number} boardId Board ID
         * @param {ApiV1GamesGameIdBoardsBoardIdMovePatchRequest} [apiV1GamesGameIdBoardsBoardIdMovePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GamesGameIdBoardsBoardIdMovePatch(gameId: number, boardId: number, apiV1GamesGameIdBoardsBoardIdMovePatchRequest?: ApiV1GamesGameIdBoardsBoardIdMovePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1GamesGameIdBoardsBoardIdMovePatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GamesGameIdBoardsBoardIdMovePatch(gameId, boardId, apiV1GamesGameIdBoardsBoardIdMovePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.apiV1GamesGameIdBoardsBoardIdMovePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MovesApi - factory interface
 * @export
 */
export const MovesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MovesApiFp(configuration)
    return {
        /**
         * 
         * @summary 駒の移動API
         * @param {number} gameId Game ID
         * @param {number} boardId Board ID
         * @param {ApiV1GamesGameIdBoardsBoardIdMovePatchRequest} [apiV1GamesGameIdBoardsBoardIdMovePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GamesGameIdBoardsBoardIdMovePatch(gameId: number, boardId: number, apiV1GamesGameIdBoardsBoardIdMovePatchRequest?: ApiV1GamesGameIdBoardsBoardIdMovePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1GamesGameIdBoardsBoardIdMovePatch200Response> {
            return localVarFp.apiV1GamesGameIdBoardsBoardIdMovePatch(gameId, boardId, apiV1GamesGameIdBoardsBoardIdMovePatchRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MovesApi - object-oriented interface
 * @export
 * @class MovesApi
 * @extends {BaseAPI}
 */
export class MovesApi extends BaseAPI {
    /**
     * 
     * @summary 駒の移動API
     * @param {number} gameId Game ID
     * @param {number} boardId Board ID
     * @param {ApiV1GamesGameIdBoardsBoardIdMovePatchRequest} [apiV1GamesGameIdBoardsBoardIdMovePatchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public apiV1GamesGameIdBoardsBoardIdMovePatch(gameId: number, boardId: number, apiV1GamesGameIdBoardsBoardIdMovePatchRequest?: ApiV1GamesGameIdBoardsBoardIdMovePatchRequest, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).apiV1GamesGameIdBoardsBoardIdMovePatch(gameId, boardId, apiV1GamesGameIdBoardsBoardIdMovePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



