continue
find_king(board_array, side)
continue
board_array
find_king(board_array, side)
continue!
continue
in_check?(parsed_data[:board_array], 'b')
in_check?(parsed_data[:board_array], 'w')
parsed_data[:board_array]
in_check?(parsed_data[:board_array], side)
in_check?(parsed_data[:board_array], opponent_side)
opponent_side
side
in_check?(parsed_data[:board_array], opponent_side)
in_check?(parsed_data[:board_array], side)
in_check?(parsed_data[:board_array], opponent_side)
parsed_data[:board_array]
next
continue
board
continue
board
continue
board
recent_boards
recent_boards.last
board
continue
recent_boards.count
recent_boards
continue
board
continue
in_check?(parsed_data[:board_array], opponent_side)
continue
in_check?(parsed_data[:board_array], opponent_side)
continue
in_check?(parsed_data[:board_array], opponent_side)
continue
in_check?(parsed_data[:board_array], opponent_side)
continue
board_history.first(8)
board
continue
board
recent_boards
continue
in_check?(parsed_data[:board_array], opponent_side)
continue
in_check?(parsed_data[:board_array], opponent_side)
continue
parsed_data[:board_array]
in_check?(parsed_data[:board_array], opponent_side)
continue
conginue
continue
next
net
next
in_check?(board_array, opponent_side)
continue
in_check?(parsed_data[:board_array], parsed_data[:side])
in_check?(parsed_data[:board_array], opponent_side)
parsed_data
continue
Board.where(game_id: 780).order(created_at: :desc).all.first(1)
Board.where(game_id: 780).order(created_at: :desc).all.reverse.first(1)
Board.where(game_id: 780).order(created_at: :desc).all.reverse.last(1)
Board.where(game_id: 780).order(created_at: :desc).all.last(1)
Board.where(game_id: 780).order(created_at: :desc).all.last(8)
Board.where(game_id: 780).all.count
Board.where(game_id: game.id).order(created_at: :desc).all.count
recent_boards.count
parsed_data[:board_array]
recent_boards.reverse
recent_boards
in_check?(parsed_data[:board_array], side)
in_check?(parsed_data[:board_array], opponent_side)
 opponent_side = parsed_data[:side] == 'b' ? 'w' : 'b'
parsed_data = board.parse_sfen
board
continue
in_check?(board_array, side)
continue
in_check?(parsed_data[:board_array], opponent_side)
continue
Pieces::B.promoted_move?(move_info, board_array, opponent_side)
piece_class.promoted_move?(move_info, board_array, opponent_side)
Pieces::B.move?(move_info, board_array, opponent_side)
move_info =  { type: :move, from_row: 6, from_col: 2, to_row: 8, to_col: 4}
Pieces::B.move?(move_info, board_array, side)
move_info
opponent_side
Pieces::B.move?(move_info, board_array, opponent_side)
move_info
move_info =  { type: :move, from_row: 2, from_col: 6, to_row: 8, to_col: 4}
king_pos[0]
board_array[2][6]
board_array[6][2]
board_array[6][6]
board_array[6][7]
board_array[6][6]
board_array
from_row
king_pos[0]
move_info
king_pos
continue
continue!
continue
board_array 
opponent_side
next
find_king(board_array, side)
continue
in_check?(board_array, side)
continue
side
board_array
in_check?(board_array, side)
recent_boards.length
recent_boards.length < 8
continue
recent_boards
 recent_boards.length < 8
board_history.last(8)
board_history
continue
 move_history.last(4)
continue
 move_history.last(4)
move_history
continue
 Board.where(game_id: game.id).count
continue
 Board.where(game_id: game.id).count
 Board.where(game_id: game.id).order(created_at: :desc).all
continue
 Board.where(game_id: game.id).order(created_at: :desc).all
Board.where(game_id: game.id)
continue
Board.all
 Board.find(game_id: game.id)
game.id
game
 Board.find(game_id: game.id).all
continue
row
continue
row
continue
row
continue
next
board_part.split("/").map { |row| parse_row(row) }
board_part
sfen.split(" ")
parse_board(board_part)
next
parse_board(board_part)
sfen
continue
sfen.split(" ")
parse_board(board_part)
sfen.split(" ")
 Parser::SfenParser.parse(sfen)
sfen
continue
sfen
board.parse_sfen
board
continue
parsed_data
parsed_data[:board_array]
continue
board_array
continue
board_array
continue
board_array
!in_check?(simulated_board, side)
simulated_board
continue
!in_check?(simulated_board, side)
continue
 basic_legal_move?(board_array, side, move_info)
continue!
continue
Marshal.load(Marshal.dump(board_array))
continue
simulate_move(board_array, move_info)
continue
basic_legal_move?(board_array, side, move_info)
continue
Validator.legal_move?(parsed_data, move_info)
next
 Board.parse_move(move_str)
Board.parse_board_data(board)
continue
Pieces::K.move?(move_info, side)
continue
piece_type == 'P' 
continue
continie
Pieces::P.move?(move_info, side, from_piece)
continue
P.move?(move_info, side, from_piece)
continue
 Validator.validate!(game, board, move_str)
continue
 Validator.validate!(game, board, move_str)
continue
 Move::Validator.new(game, board, move_str).validate!
continue
Move.process_move(@game, @board, params[:move])
continue
 Move.valid_move_or_drop?(
      parsed_data[:board_array], 
      parsed_data[:hand], 
      parsed_data[:side], 
      parsed_data[:move_number], 
      move_info
    )
continue
Move.legal_move?(parsed_data[:board_array], parsed_data[:hand], parsed_data[:side], move_info)
parsed_data
continue
 valid_move?(board_array, hand, side, move_info)
continue
board_array[move_info[:to_row]][move_info[:to_col]]
move_info
board_array
 valid_move_or_drop?(board_array, hand, side, move_info)
continue
valid_move_or_drop?(board_array, hand, side, move_info)
continue
valid_move_or_drop?(board_array, hand, side, move_info)
continue
legal_move?(board_array, hand, side, move_info)
continue
contine
legal_move?(board_array, hand, side, move_info)
continue
legal_move?(board_array, hand, side, move_info)
continue
hand_hash
continue
hand_hash
continue
hand_hash
continue
hand_str
continue
hand_str
continue
